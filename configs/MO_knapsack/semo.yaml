# Nested config for OnePlusOneEA on Knapsack experiment
# This shows how we could use nested structure with dependency resolution

experiment_name: "test_multiobjective"

# ==============================
# Run Configuration
# ==============================
run:
  max_gens: 100
  eval_limit: 10000
  use_noise_dependent_eval_limit: true
  eval_limit_for_noise:
    "0": 38392
    "1": 38392
    "2": 41066
    "3": 44477
    "4": 50728
    "5": 56851
    "6": 64079
    "7": 70736
    "8": 790344
    "9": 86078
    "10": 93638
  seed: 1
  num_runs: 1
  parallel: true

# ==============================
# MLflow Configuration
# ==============================
mlflow:
  tracking_uri: "data/mlruns"

# ==============================
# Hydra Configuration
# ==============================
hydra:
  run:
    dir: "data/outputs"

# ==============================
# Algorithm Configuration
# ==============================
algo:
  name: SEMO
  type: SEMO
  
  # Algorithm initialization parameters
  init_args:
    _target_: src.algorithms.MOAlgorithms.SEMO

# ==============================
# Problem Configuration
# ==============================
problem:
  PID: f1_l-d_kp_10_269
  prob_name: knapsack
  prob_type: discrete
  opt_goal: maximise
  dimensions: null  # Will be set after loading
  opt_global: null  # Will be set after loading
  capacity: null    # Will be set after loading
  mean_value: null  # Will be set after loading
  mean_weight: null # Will be set after loading
  items_dict: null  # Will be set after loading
  
  # Problem loading
  loader:
    _target_: src.problems.ProblemScripts.load_problem_KP
    filename: f1_l-d_kp_10_269
  
  # Fitness function
  fitness_fn: eval_noisy_kp_v1_mo
  fitness_params:
    items_dict: null  # Will be set after problem loading
    capacity: null    # Will be set after problem loading
    noise_intensity: 1
  
  # Attributes and weights
  attr_function: binary_attribute
  weights: [1.0, -1.0]
  ref_point: [0, 500]